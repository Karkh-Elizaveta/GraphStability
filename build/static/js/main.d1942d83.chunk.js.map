{"version":3,"sources":["TaskGraph.js","TreeGenerate.js","App.js","serviceWorker.js","index.js"],"names":["TaskGraph","_Graph","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","key","value","console","log","taskGraph","Graph","createEmpty","store","getState","graph","vertices","forEach","e","addVertex","Vertex","name","edges","addEdge","Edge","filter","v2","vertexTwo","v1","vertexOne","vertex","reduce","accum","next","concat","map","neighbours","getNeighbours","push","answer","includes","subVertices","subGraph","v","toString","d3","require","Tree","tree","cx","cy","w","h","createGraph","vis","l","realWeight","inputWeight","vertexError","weightError","p","x","y","c","size","glabels","active","undefined","findVertice","id","t","find","findRectangle","getVertices","f","d","sort","a","b","getEdges","_","l1","p1","l2","p2","changeActive","redraw","inputAndCheck","vertexName","prompt","vertexArray","test","addLeaf","split","alert","removeLeaf","some","reposition","checkVertex","parent","length","dispatch","type","payload","fee","datetime","Date","message","firstChild","Math","min","toConsumableArray","checkWeigth","error","real","input","vError","getSubgraph","getNonNeighbours","gracefulLabels","vlbls","elbls","range","gracefulLbl","indexOf","abs","lbl","relabel","incMatx","every","showLabel","select","text","currLbl","style","i","relbl","selectAll","data","transition","duration","attr","enter","append","exit","remove","circles","temp","on","labels","getLeafCount","lC","left","svgW","svgH","BorderedDiv","styled","div","_templateObject","App","extend","_templateObject2","_templateObject3","_templateObject4","_templateObject5","_templateObject6","_templateObject7","_templateObject8","_templateObject9","success","res","_Tree","react_default","createElement","_this","TaskToolbar","prototype","getButtonList","ToolButtonList","help","toolButtons","+","-","TaskTemplate","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wRAGaA,EAAb,SAAAC,GAAA,SAAAD,IAAA,OAAAE,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,GAAAE,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,MAAAH,KAAAI,YAAA,OAAAN,OAAAO,EAAA,EAAAP,CAAAF,EAAAC,GAAAC,OAAAQ,EAAA,EAAAR,CAAAF,EAAA,OAAAW,IAAA,cAAAC,MAAA,WAGQC,QAAQC,IAAI,0TACZ,IAAIC,EAAYC,QAAMC,YAAY,GAKlC,OAJAC,QAAMC,WAAWC,MAAMC,SAASC,QAAQ,SAAAC,GAAC,OAAIR,EAAUS,UAAU,IAAIC,SAAOF,EAAEG,SAC9ER,QAAMC,WAAWC,MAAMO,MAAML,QAAQ,SAAAC,GAAC,OAAIR,EACrCa,QAAQ,IAAIC,OAAKd,EAAUM,SAASS,OAAO,SAAAC,GAAE,OAAIA,EAAGL,MAAQH,EAAES,YAC3DjB,EAAUM,SAASS,OAAO,SAAAG,GAAE,OAAIA,EAAGP,MAAQH,EAAEW,gBAC9CnB,IATf,CAAAJ,IAAA,gBAAAC,MAAA,SAYyBuB,EAAQf,GAKzB,OAJAP,QAAQC,IAAI,+KACCM,EAAMO,MAAMS,OAAO,SAACC,EAAOC,GAAR,OAAkBA,EAAKJ,WAAaC,EAChEE,EAAME,OAAOD,EAAKN,WAAcM,EAAKN,WAAaG,EAC9CE,EAAME,OAAOD,EAAKJ,WAAaG,GAAO,IAAIG,IAAI,SAAAjB,GAAC,OAAIA,EAAEG,SAhBrE,CAAAf,IAAA,mBAAAC,MAAA,SAoB4BuB,EAAQf,GAC5BP,QAAQC,IAAI,+LACZ,IAAI2B,EAAazC,EAAU0C,cAAcP,EAAQf,GACjDqB,EAAWE,KAAKR,GAChBtB,QAAQC,IAAI2B,GACZ,IAAIG,EAASxB,EAAMC,SAASe,OAAO,SAACC,EAAOC,GAAR,OAAkBG,EAAWI,SAASP,EAAKZ,MAC1EW,EAAQA,EAAME,OAAOD,EAAKZ,OAAO,IAErC,OADAb,QAAQC,IAAI,8CAAaqB,EAAS,kFAAmBS,GAC9CA,IA5Bf,CAAAjC,IAAA,cAAAC,MAAA,SA+BuBkC,EAAa1B,GAC5BP,QAAQC,IAAI,8IACZ,IAAIiC,EAAW/B,QAAMC,YAAY,GAKjC,OAJAG,EAAMC,SAASS,OAAO,SAAAkB,GAAC,OAAIF,EAAYD,SAASG,EAAEtB,QAAOJ,QAAQ,SAAA0B,GAAC,OAAID,EAASvB,UAAUwB,KACzF5B,EAAMO,MAAMG,OAAO,SAAAP,GAAC,OAAIuB,EAAYD,SAAStB,EAAEW,UAAUe,aAClDH,EAAYD,SAAStB,EAAES,UAAUiB,cACnC3B,QAAQ,SAAAC,GAAC,OAAIwB,EAASnB,QAAQL,KAC5BwB,MAtCf/C,EAAA,CAA+BgB,SCAzBkC,EAAKC,EAAQ,KAENC,EACT,SAAAA,IACClD,OAAAC,EAAA,EAAAD,CAAAE,KAAAgD,GACGvC,QAAQC,IAAI,yIACZ,IAA+DuC,EAAO,CAACC,GAAI,IAAKC,GAAI,GAAIC,EAAG,GAAIC,EAAG,IAClGJ,EAAKjC,MAAQpB,EAAU0D,cACvBL,EAAKM,IAAM,CAEPX,EAAG,EAEHY,EAAG,IAEHxC,MAAOiC,EAAKjC,MAEZyC,WAAYR,EAAKjC,MAAMC,SAEvByC,YAAaT,EAAKjC,MAAMC,SAExB0C,aAAa,EAEbC,aAAa,EACbC,EAAG,CAACC,EAAGb,EAAKC,GAAIa,EAAGd,EAAKE,IACxBa,EAAG,IAEPf,EAAKgB,KAAO,EACZhB,EAAKiB,QAAU,GACfjB,EAAKkB,YAASC,EAEdnB,EAAKoB,YAAc,SAAUC,GASzB,OARA7D,QAAQC,IAAI,2IACZ,SAAS2D,EAAYE,GACjB,OAAIA,EAAE3B,IAAM0B,EACDC,EAEJA,EAAEP,EAAEQ,KAAKH,GAGbA,CAAYpB,EAAKM,MAG5BN,EAAKwB,cAAgB,SAAUH,GAS3B,OARA7D,QAAQC,IAAI,gKACZ,SAAS+D,EAAcF,GACnB,OAAIA,EAAE3B,IAAM0B,EACDC,EAEJA,EAAEP,EAAEQ,KAAKC,GAGbA,CAAcxB,EAAKM,MAG9BN,EAAKyB,YAAc,WACfjE,QAAQC,IAAI,sLACZ,IAAIkC,EAAI,GAUR,OARA,SAAS8B,EAAYH,EAAGI,GACpB/B,EAAEL,KAAK,CAACK,EAAG2B,EAAE3B,EAAGY,EAAGe,EAAEf,EAAGK,EAAGU,EAAEV,EAAGc,EAAGA,IACnCJ,EAAEP,EAAE9C,QAAQ,SAAU0D,GAClB,OAAOF,EAAYE,EAAG,CAAChC,EAAG2B,EAAE3B,EAAGiB,EAAGU,EAAEV,MAI5Ca,CAAYzB,EAAKM,IAAK,IACfX,EAAEiC,KAAK,SAAUC,EAAGC,GACvB,OAAOD,EAAElC,EAAImC,EAAEnC,KAIvBK,EAAK+B,SAAW,WACZ,IAAI7D,EAAI,GAUR,OATAV,QAAQC,IAAI,uKACZ,SAASsE,EAASC,GACdA,EAAEjB,EAAE9C,QAAQ,SAAU0D,GAClBzD,EAAEoB,KAAK,CAACV,GAAIoD,EAAErC,EAAGsC,GAAID,EAAEzB,EAAG2B,GAAIF,EAAEpB,EAAGlC,GAAIiD,EAAEhC,EAAGwC,GAAIR,EAAEpB,EAAG6B,GAAIT,EAAEf,MAE/DoB,EAAEjB,EAAE9C,QAAQ8D,GAGhBA,CAAS/B,EAAKM,KACPpC,EAAE0D,KAAK,SAAUC,EAAGC,GACvB,OAAOD,EAAEnD,GAAKoD,EAAEpD,MAIxBsB,EAAKqC,aAAe,SAAU1C,GAC1BnC,QAAQC,IAAI,yMACZuC,EAAKkB,OAASvB,EACd2C,EAAOtC,EAAKgB,KAAMhB,EAAKkB,SAG3BlB,EAAKuC,cAAgB,WAGjB,GAFA/E,QAAQC,IAAI,wOAEO0D,GAAfnB,EAAKkB,OAAT,CAIA,IAAIsB,EAAaC,OAAO,4GACpBC,EAAcD,OAAO,8OAEnB,uBAAuBE,KAAKD,IAAgB,QAAQC,KAAKD,GAI/D1C,EAAK4C,QAAQ5C,EAAKkB,OAAQsB,EAAYE,EAAYG,MAAM,QAHpDC,MAAM,iRAPNA,MAAM,yTAad9C,EAAK+C,WAAa,SAAUf,GACxBxE,QAAQC,IAAI,yKACZ,SAASsF,EAAWzB,GACZA,EAAEP,EAAEiC,KAAK,SAAA9E,GAAC,OAAIA,EAAEyB,IAAMqC,MACtBV,EAAEP,EAAIO,EAAEP,EAAEtC,OAAO,SAAAP,GAAC,OAAIA,EAAEyB,IAAMqC,KAElCV,EAAEP,EAAE9C,QAAQ8E,GAGhBA,CAAW/C,EAAKM,KAChB2C,EAAWjD,EAAKM,KAChBN,EAAKkB,YAASC,EACdmB,EAAOtC,EAAKgB,KAAMhB,EAAKkB,SAG3BlB,EAAKkD,YAAc,SAAUC,EAAQX,GAGjC,GAFAhF,QAAQC,IAAI,8HAERuC,EAAKjC,MAAMC,SAASmB,IAAI,SAAAjB,GAAC,OAAIA,EAAEG,OAAMmB,SAASgD,GAAa,CAE3D,GAAIW,EAAOpF,MAAMC,SAASmB,IAAI,SAAAjB,GAAC,OAAIA,EAAEG,OAAMmB,SAASgD,GAAa,CAE7D,GAA8C,GAA1CxC,EAAKoB,YAAYpB,EAAKkB,QAAQH,EAAEqC,OAChC,OAAO,EAIP,GAAKD,EAAOpC,EAAE5B,IAAI,SAAAjB,GAAC,OAAIA,EAAEqC,IAAGf,SAASgD,GA2BjC,OARA3E,QAAMwF,SAAS,CACXC,KAAM,wBACNC,QAAS,CACLC,IAAK,EACLC,SAAU,IAAIC,KACdC,QAAS,2QAGV,EAzBP,IAAIC,EAAa5D,EAAKoB,YAAYyC,KAAKC,IAAL5G,MAAA2G,KAAIhH,OAAAkH,EAAA,EAAAlH,CAAQsG,EAAOpC,EAAE5B,IAAI,SAAAjB,GAAC,OAAIA,EAAEyB,OAClE,OAAIhD,EAAU0C,cAAcuE,EAAWrD,EAAG4C,EAAOpF,OAAOyB,SAASgD,KAI7D3E,QAAMwF,SAAS,CACXC,KAAM,wBACNC,QAAS,CACLC,IAAK,EACLC,SAAU,IAAIC,KACdC,QAAS,4ZAGV,GAyBnB,OARA9F,QAAMwF,SAAS,CACXC,KAAM,wBACNC,QAAS,CACLC,IAAK,EACLC,SAAU,IAAIC,KACdC,QAAS,iWAGV,EAYX,OARA9F,QAAMwF,SAAS,CACXC,KAAM,wBACNC,QAAS,CACLC,IAAK,EACLC,SAAU,IAAIC,KACdC,QAAS,sOAGV,GAIf3D,EAAKgE,YAAc,SAAUC,EAAOC,EAAMC,GACtC3G,QAAQC,IAAI,uJACZ,IAAII,EAAQiC,EAAQ,GAA2BjC,MAC/C,OAAIoG,GAEIpG,EAAMwF,SAAS,CACXC,KAAM,wBACNC,QAAS,CACLC,IAAK,EACLC,SAAU,IAAIC,KACdC,QAAS,iYAGV,GAMPO,EAAKtC,OAAOhC,YAAcuE,EAAMvC,OAAOhC,aAIvC/B,EAAMwF,SAAS,CACXC,KAAM,wBACNC,QAAS,CACLC,IAAK,EACLC,SAAU,IAAIC,KACdC,QAAS,8LAGV,IAKnB3D,EAAK4C,QAAU,SAAUZ,EAAGQ,EAAYE,GACpClF,QAAQC,IAAI,2MACZ,SAASmF,EAAQtB,EAAGjD,GAChB,GAAIiD,EAAE3B,GAAKqC,EAeXV,EAAEP,EAAE9C,QAAQ,SAAAC,GAAC,OAAI0E,EAAQ1E,EAAGG,SAf5B,CACI,IAAI+F,EAASpE,EAAKkD,YAAY5B,EAAGkB,GACjClB,EAAEP,EAAEzB,KAAK,CACLK,EAAGK,EAAKgB,OACRT,EAAGiC,EACHzE,MAAOpB,EAAU0H,YAAY3B,EAAapB,EAAEvD,OAC5CyC,WAAY7D,EAAU2H,iBAAiB9B,EAAYlB,EAAEvD,OACrD0C,YAAaiC,EACbhC,YAAa0D,EACbzD,YAAaX,EAAKgE,YAAYI,EAAQzH,EAAU2H,iBAAiB9B,EAAYlB,EAAEvD,OAAQ2E,GACvF9B,EAAG,GACHG,EAAG,MAOf6B,CAAQ5C,EAAKM,IAAKkC,GAClBS,EAAWjD,EAAKM,IAAKkC,GACrBF,EAAOtC,EAAKgB,KAAMhB,EAAKkB,SAG3BlB,EAAKuE,eAAiB,WAClB/G,QAAQC,IAAI,oCACZuC,EAAKiB,QAAU,GACf,IAAItB,EAAIK,EAAKyB,cACT+C,EAAQ,GAAIC,EAAQ,GAgCxB5E,EAAG6E,MAAM,EAAG1E,EAAKgB,MAAM/C,QAAQ,SAAU0D,GACrC6C,EAAQ,CAAC7C,GACT8C,EAAQ,GAjCM,SAAdE,EAAwB5D,GACxB,GAAIA,GAAKf,EAAKgB,KAkBdnB,EAAG6E,MAAM,EAAG1E,EAAKgB,MACZvC,OAAO,SAAUkD,GACd,OAA6B,GAArB6C,EAAMI,QAAQjD,KAA+D,GAAjD8C,EAAMG,QAAQf,KAAKgB,IAAIL,EAAM7E,EAAEoB,GAAGW,EAAE/B,GAAKgC,MAEhF1D,QAAQ,SAAU0D,GACf6C,EAAMzD,GAAKY,EACX8C,EAAM1D,GAAK8C,KAAKgB,IAAIL,EAAM7E,EAAEoB,GAAGW,EAAE/B,GAAKgC,GACtCgD,EAAY5D,EAAI,UACTyD,EAAMzD,UACN0D,EAAM1D,SA3BrB,CACI,IAAI+D,EAAM,CACNA,IAAKN,EAAMrF,IAAI,SAAU6C,GACrB,OAAOA,KAGf+C,EAAQD,GACR,IAAIE,EAAUhF,EAAKgF,QAAQ7F,IAAI,SAAU6C,GACrC,OAAOA,KAEY,EAAlBhC,EAAKgF,QAAQ,KAAW,GAAK,GAAKhF,EAAKiB,QAAQgE,MAAM,SAAUtD,GAChE,OAAOA,EAAEqD,QAAQpF,YAAcoF,EAAQpF,eAEvCkF,EAAIE,QAAUA,EACdhF,EAAKiB,QAAQ3B,KAAKwF,KAmB1BH,CAAY,KAEhB3E,EAAKkF,UAAU,GACfrF,EAAGsF,OAAO,aAAaC,KAAKpF,EAAKqF,QAAU,IAAMrF,EAAKiB,QAAQmC,QAC9DvD,EAAGsF,OAAO,aAAaG,MAAM,aAAc,YAG/CtF,EAAKkF,UAAY,SAAUK,GACvB/H,QAAQC,IAAI,0JACR8H,EAAIvF,EAAKiB,QAAQmC,QAAUmC,EAAI,EAC/BzC,MAAM,2BAIViC,EAAQ/E,EAAKiB,QAAQsE,EAAI,IACzBjD,IACAtC,EAAKqF,QAAUE,EACf1F,EAAGsF,OAAO,aAAaC,KAAKpF,EAAKqF,QAAU,IAAMrF,EAAKiB,QAAQmC,UAGlE,IAAI2B,EAAU,SAAUD,GACpBtH,QAAQC,IAAI,iOACZ,SAAS+H,EAAMlE,GACXA,EAAEf,EAAIuE,EAAIA,IAAIxD,EAAE3B,GAChB2B,EAAEP,EAAE9C,QAAQuH,GAGhBA,CAAMxF,EAAKM,KACXN,EAAKgF,QAAUF,EAAIE,SAGnB1C,EAAS,SAAUtB,EAAME,GACzB1D,QAAQC,IAAI,qIAEZ,IAAIa,EAAQuB,EAAGsF,OAAO,YAAYM,UAAU,QAAQC,KAAK1F,EAAK+B,YAE9DzD,EAAMqH,aAAaC,SAAS,KACvBC,KAAK,KAAM,SAAUlE,GAClB,OAAOA,EAAEO,GAAGrB,IACbgF,KAAK,KAAM,SAAUlE,GACxB,OAAOA,EAAEO,GAAGpB,IAEX+E,KAAK,KAAM,SAAUlE,GAClB,OAAOA,EAAES,GAAGvB,IACbgF,KAAK,KAAM,SAAUlE,GACxB,OAAOA,EAAES,GAAGtB,IAGhBxC,EAAMwH,QAAQC,OAAO,QAChBF,KAAK,KAAM,SAAUlE,GAClB,OAAOA,EAAEO,GAAGrB,IACbgF,KAAK,KAAM,SAAUlE,GACxB,OAAOA,EAAEO,GAAGpB,IAEX+E,KAAK,KAAM,SAAUlE,GAClB,OAAOA,EAAEO,GAAGrB,IACbgF,KAAK,KAAM,SAAUlE,GACxB,OAAOA,EAAEO,GAAGpB,IAEX6E,aAAaC,SAAS,KACtBC,KAAK,KAAM,SAAUlE,GAClB,OAAOA,EAAES,GAAGvB,IACbgF,KAAK,KAAM,SAAUlE,GACxB,OAAOA,EAAES,GAAGtB,IAGhBxC,EAAM0H,OAAOC,SAEb,IAAIC,EAAUrG,EAAGsF,OAAO,cAAcM,UAAU,UAAUC,KAAK1F,EAAKyB,eAEpEyE,EAAQP,aAAaC,SAAS,KAAKC,KAAK,KAAM,SAAUlE,GACpD,OAAOA,EAAEf,EAAEC,IACZgF,KAAK,KAAM,SAAUlE,GACpB,OAAOA,EAAEf,EAAEE,IAEV+E,KAAK,QAAS,SAAClE,GACZ,IAAIhC,EAAIK,EAAKoB,YAAYO,EAAEhC,GAC3B,OAAOA,EAAEe,YAAef,EAAEA,GAAKK,EAAKkB,OAAS,cAAgB,QAAYvB,EAAEA,GAAKK,EAAKkB,OAAS,SAAW,KAEjHgF,EAAQH,OAAO,SAASX,KAAK,SAACzD,GAAD,OAAO3B,EAAKoB,YAAYO,EAAEhC,GAAGc,cAE1D,IAAI0F,EAAOD,EAAQJ,QAAQC,OAAO,UAAUF,KAAK,KAAM,SAAUlE,GAC7D,OAAOA,EAAED,EAAEd,EAAEC,IACdgF,KAAK,KAAM,SAAUlE,GACpB,OAAOA,EAAED,EAAEd,EAAEE,IACd+E,KAAK,IArXuB,IAsX1BO,GAAG,QAAS,SAAUzE,GACnB,OAAO3B,EAAKqC,aAAaV,EAAEhC,KAEnCwG,EAAKJ,OAAO,SAASX,KAAK,SAACzD,GAAD,OAAO3B,EAAKoB,YAAYO,EAAEhC,GAAGc,cACvD0F,EAAKR,aAAaC,SAAS,KAAKC,KAAK,KAAM,SAAUlE,GACjD,OAAOA,EAAEf,EAAEC,IACZgF,KAAK,KAAM,SAAUlE,GACpB,OAAOA,EAAEf,EAAEE,IAEV+E,KAAK,QAAS,SAAClE,GACZ,IAAIhC,EAAIK,EAAKoB,YAAYO,EAAEhC,GAC3B,OAAOA,EAAEe,YAAef,EAAEA,GAAKK,EAAKkB,OAAS,cAAgB,QAAYvB,EAAEA,GAAKK,EAAKkB,OAAS,SAAW,KAGjHgF,EAAQF,OAAOC,SAEf,IAAII,EAASxG,EAAGsF,OAAO,aAAaM,UAAU,QAAQC,KAAK1F,EAAKyB,eAEhE4E,EAAOjB,KAAK,SAAUzD,GAClB,OAAOA,EAAEpB,IACVoF,aAAaC,SAAS,KACpBC,KAAK,IAAK,SAAUlE,GACjB,OAAOA,EAAEf,EAAEC,IACZgF,KAAK,IAAK,SAAUlE,GACvB,OAAOA,EAAEf,EAAEE,EAAI,IAEnBuF,EAAON,OAAO,SAASX,KAAK,SAACzD,GAAD,OAAO3B,EAAKoB,YAAYO,EAAEhC,GAAGc,eAEzD0F,EAAOE,EAAOP,QAAQC,OAAO,QAAQF,KAAK,IAAK,SAAUlE,GACrD,OAAOA,EAAED,EAAEd,EAAEC,IACdgF,KAAK,IAAK,SAAUlE,GACnB,OAAOA,EAAED,EAAEd,EAAEE,EAAI,IAEhBsE,KAAK,SAAUzD,GACZ,OAAOA,EAAEpB,IACV6F,GAAG,QAAS,SAAUzE,GACrB,OAAO3B,EAAKqC,aAAaV,EAAEhC,MAE9BgG,aAAaC,SAAS,KACtBC,KAAK,IAAK,SAAUlE,GACjB,OAAOA,EAAEf,EAAEC,IACZgF,KAAK,IAAK,SAAUlE,GACvB,OAAOA,EAAEf,EAAEE,EAAI,IAEnBqF,EAAKJ,OAAO,SAASX,KAAK,SAACzD,GAAD,OAAO3B,EAAKoB,YAAYO,EAAEhC,GAAGc,cAEvD4F,EAAOL,OAAOC,UAGdK,EAAe,SAAfA,EAAyBtE,GAGzB,OAFAxE,QAAQC,IAAI,0KAEM,GAAduE,EAAEjB,EAAEqC,OAAoB,EAChBpB,EAAEjB,EAAE5B,IAAImH,GAAcvH,OAAO,SAAU8C,EAAGC,GAClD,OAAOD,EAAIC,KAIfmB,EAAa,SAAbA,EAAuBtD,GACvBnC,QAAQC,IAAI,sMACZ,IAAI8I,EAAKD,EAAa3G,GAAI6G,EAAO7G,EAAEiB,EAAEC,EAAIb,EAAKG,GAAKoG,EAAK,GAAK,EAC7D5G,EAAEoB,EAAE9C,QAAQ,SAAU0D,GAClB,IAAIxB,EAAIH,EAAKG,EAAImG,EAAa3E,GAC9B6E,GAAQrG,EACRwB,EAAEf,EAAI,CAACC,EAAG2F,GAAQrG,EAAIH,EAAKG,GAAK,EAAGW,EAAGnB,EAAEiB,EAAEE,EAAId,EAAKI,GACnD6C,EAAWtB,MAKfnE,QAAQC,IAAI,qJAEZoC,EAAGsF,OAAO,cAAcY,OAAO,OAAOF,KAAK,KAAM,UAEjDhG,EAAGsF,OAAO,WAAWY,OAAO,UAAUF,KAAK,OAAQ,UAAUT,KAAK,KAC7DgB,GAAG,QAAS,WACT,OAAOpG,EAAKuC,kBAGpB1C,EAAGsF,OAAO,WAAWY,OAAO,UAAUF,KAAK,OAAQ,UAAUT,KAAK,KAC7DgB,GAAG,QAAS,WACT,OAAOpG,EAAK+C,WAAW/C,EAAKkB,UAGpCrB,EAAGsF,OAAO,cAAcY,OAAO,OAAOF,KAAK,QAASY,QAAYZ,KAAK,SAAUa,QAAYb,KAAK,KAAM,WAAWA,KAAK,UAAW,eAEjIhG,EAAGsF,OAAO,YAAYY,OAAO,KAAKF,KAAK,KAAM,WAAWJ,UAAU,QAAQC,KAAK1F,EAAK+B,YAAY+D,QAAQC,OAAO,QAC1GF,KAAK,KAAM,SAAUlE,GAClB,OAAOA,EAAEO,GAAGrB,IACbgF,KAAK,KAAM,SAAUlE,GACxB,OAAOA,EAAEO,GAAGpB,IAEX+E,KAAK,KAAM,SAAUlE,GAClB,OAAOA,EAAES,GAAGvB,IACbgF,KAAK,KAAM,SAAUlE,GACxB,OAAOA,EAAES,GAAGtB,IAGhBjB,EAAGsF,OAAO,YAAYY,OAAO,KAAKF,KAAK,KAAM,aAAaJ,UAAU,UAAUC,KAAK1F,EAAKyB,eAAeqE,QAClGC,OAAO,UAAUF,KAAK,KAAM,SAAUlE,GACvC,OAAOA,EAAEf,EAAEC,IACZgF,KAAK,KAAM,SAAUlE,GACpB,OAAOA,EAAEf,EAAEE,IACZ+E,KAAK,IA7duB,IA8d1BO,GAAG,QAAS,SAAUzE,GACnB,OAAO3B,EAAKqC,aAAaV,EAAEhC,KAE9BoG,OAAO,SAASX,KAAK,SAACzD,GAAD,OAAO3B,EAAKoB,YAAYO,EAAEhC,GAAGc,cAEvDZ,EAAGsF,OAAO,YAAYY,OAAO,KAAKF,KAAK,KAAM,YAAYJ,UAAU,QAAQC,KAAK1F,EAAKyB,eAAeqE,QAAQC,OAAO,QAC9GF,KAAK,IAAK,SAAUlE,GACjB,OAAOA,EAAEf,EAAEC,IACZgF,KAAK,IAAK,SAAUlE,GACvB,OAAOA,EAAEf,EAAEE,EAAI,IAChBsE,KAAK,SAAUzD,GACd,OAAOA,EAAEpB,IAER6F,GAAG,QAAS,SAAUzE,GACnB,OAAO3B,EAAKqC,aAAaV,EAAEhC,KAE9BoG,OAAO,SAASX,KAAK,SAACzD,GAAD,OAAO3B,EAAKoB,YAAYO,EAAEhC,GAAGc,cAG3D1D,KAAKiD,KAAOA,ijDCnfpB,IAAM2G,EAAcC,UAAOC,IAAVC,KAoIFC,GA3HGJ,EAAYK,OAAfC,KAUEN,EAAYK,OAAfE,KAUGP,EAAYK,OAAfG,KAUIR,EAAYK,OAAfI,KAUIT,EAAYK,OAAfK,KAUAV,EAAYK,OAAhBM,KAUCV,UAAOC,IAAVU,KAUMX,UAAOC,IAAVW,yLAgBLhK,QAAQC,IAAI,sBAEZ,MAAO,CAAEgK,SAASC,EAAWlE,IADnB,gDAKVhG,QAAQC,IAAI,8IACZV,KAAKiD,KAAO,IAAI2H,iCAKhB,OADAnK,QAAQC,IAAI,iBAER,kBAAMmK,EAAA/F,EAAAgG,cAAA,OAAKxG,GAAI,wDAIN,IAAAyG,EAAA/K,KAgBb,OAfAS,QAAQC,IAAI,6OACZsK,cAAYC,UAAUC,cAAgB,WAWlC,OAVAC,iBAAeF,UAAUG,KAAO,yYAChCD,iBAAeF,UAAUI,YAAc,CACnCC,IAAK,WACGP,EAAK9H,MAAM8H,EAAK9H,KAAK4C,WAE7B0F,IAAK,WACGR,EAAK9H,MAAM8H,EAAK9H,KAAK+C,eAGjCvF,QAAQC,IAAI,wRACLyK,kBAEX1K,QAAQC,IAAI,oSACLsK,qBAtCGQ,iBCrFEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOlB,EAAA/F,EAAAgG,cAACkB,EAAD,MAASC,SAASC,eAAe,SD0H/CzL,QAAQC,IAAI,iCACR,kBAAmByL,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.d1942d83.chunk.js","sourcesContent":["import {Graph, Vertex, Edge} from \"graphlabs.core.graphs\"\r\nimport { store } from 'graphlabs.core.template';\r\n\r\nexport class TaskGraph extends Graph{\r\n\r\n    static createGraph() {\r\n        console.log(\"createGraph (TaskGraph.js): грузим граф из задания для дальнейшего использования\")\r\n        let taskGraph = Graph.createEmpty(0);\r\n        store.getState().graph.vertices.forEach(e => taskGraph.addVertex(new Vertex(e.name)))\r\n        store.getState().graph.edges.forEach(e => taskGraph\r\n            .addEdge(new Edge(taskGraph.vertices.filter(v2 => v2.name == e.vertexTwo),\r\n                taskGraph.vertices.filter(v1 => v1.name == e.vertexOne))))\r\n        return taskGraph\r\n    }\r\n\r\n    static getNeighbours(vertex, graph) {\r\n        console.log(\"getNeighbours (TaskGraph.js): ищем соседей вершины графа\")\r\n        let answer = graph.edges.reduce((accum, next) => (next.vertexOne == vertex) ?\r\n            accum.concat(next.vertexTwo) : (next.vertexTwo == vertex) ?\r\n                accum.concat(next.vertexOne) : accum, []).map(e => e.name)\r\n        return answer\r\n    }\r\n\r\n    static getNonNeighbours(vertex, graph) {\r\n        console.log(\"getNoNNeighbours (TaskGraph.js): ищем не-соседей вершины графа\")\r\n        let neighbours = TaskGraph.getNeighbours(vertex, graph)\r\n        neighbours.push(vertex)\r\n        console.log(neighbours)\r\n        let answer = graph.vertices.reduce((accum, next) => (neighbours.includes(next.name)) ?\r\n            accum : accum.concat(next.name), [])\r\n        console.log('вершина ' + vertex + 'неокрестность ' + answer)\r\n        return answer\r\n    }\r\n\r\n    static getSubgraph(subVertices, graph) {\r\n        console.log(\"getSubgraph (TaskGraph.js): строим подграф графа\")\r\n        let subGraph = Graph.createEmpty(0)\r\n        graph.vertices.filter(v => subVertices.includes(v.name)).forEach(v => subGraph.addVertex(v))\r\n        graph.edges.filter(e => subVertices.includes(e.vertexOne.toString())\r\n            && subVertices.includes(e.vertexTwo.toString()))\r\n            .forEach(e => subGraph.addEdge(e))\r\n        return subGraph\r\n    }\r\n}","import './TreeGenerate.css';\r\nimport {TaskGraph} from \"./TaskGraph\";\r\nimport { store } from 'graphlabs.core.template';\r\nconst d3 = require('d3');\r\n\r\nexport class Tree {\r\n    constructor()\r\n    {\r\n        console.log(\"Tree constructor (TreeGenerate.js): инициируем дерево\")\r\n        let svgW = 100, svgH = 100, vRad = 12, xRect = 50, yRect = 16, tree = {cx: 300, cy: 30, w: 40, h: 70};\r\n        tree.graph = TaskGraph.createGraph();\r\n        tree.vis = {\r\n            // идентификатор\r\n            v: 0,\r\n            // имя\r\n            l: 'G',\r\n            // граф, связанный с вершиной\r\n            graph: tree.graph,\r\n            // вес узла\r\n            realWeight: tree.graph.vertices,\r\n            // вес узла, введенный пользователем\r\n            inputWeight: tree.graph.vertices,\r\n            // ошибочная вершина или нет\r\n            vertexError: false,\r\n            // ошибочный вес или нет\r\n            weightError: false,\r\n            p: {x: tree.cx, y: tree.cy},\r\n            c: []\r\n        };\r\n        tree.size = 1;\r\n        tree.glabels = [];\r\n        tree.active = undefined;\r\n\r\n        tree.findVertice = function (id) {\r\n            console.log(\"findVertice (TreeGenerate.js): ищем вершину дерева\")\r\n            function findVertice(t) {\r\n                if (t.v === id) {\r\n                    return t;\r\n                }\r\n                return t.c.find(findVertice);\r\n            }\r\n\r\n            return findVertice(tree.vis);\r\n        }\r\n\r\n        tree.findRectangle = function (id) {\r\n            console.log(\"findRectangle (TreeGenerate.js): ищем вес вершины дерева\")\r\n            function findRectangle(t) {\r\n                if (t.v === id) {\r\n                    return t;\r\n                }\r\n                return t.c.find(findRectangle);\r\n            }\r\n\r\n            return findRectangle(tree.vis);\r\n        }\r\n\r\n        tree.getVertices = function () {\r\n            console.log(\"getVertices (TreeGenerate.js): получаем все вершины дерева\")\r\n            let v = [];\r\n\r\n            function getVertices(t, f) {\r\n                v.push({v: t.v, l: t.l, p: t.p, f: f});\r\n                t.c.forEach(function (d) {\r\n                    return getVertices(d, {v: t.v, p: t.p});\r\n                });\r\n            }\r\n\r\n            getVertices(tree.vis, {});\r\n            return v.sort(function (a, b) {\r\n                return a.v - b.v;\r\n            });\r\n        }\r\n\r\n        tree.getEdges = function () {\r\n            let e = [];\r\n            console.log(\"getEdges (TreeGenerate.js): получаем все ребра дерева\")\r\n            function getEdges(_) {\r\n                _.c.forEach(function (d) {\r\n                    e.push({v1: _.v, l1: _.l, p1: _.p, v2: d.v, l2: d.l, p2: d.p});\r\n                });\r\n                _.c.forEach(getEdges);\r\n            }\r\n\r\n            getEdges(tree.vis);\r\n            return e.sort(function (a, b) {\r\n                return a.v2 - b.v2;\r\n            });\r\n        }\r\n\r\n        tree.changeActive = function (v) {\r\n            console.log(\"changeActive (TreeGenerate.js): меняем активную вершину дерева\")\r\n            tree.active = v;\r\n            redraw(tree.size, tree.active)\r\n        }\r\n\r\n        tree.inputAndCheck = function () {\r\n            console.log(\"inputAndCheck (TreeGenerate.js): получаем информацию о новой вершине\")\r\n            // проверка, выбрана ли вершина\r\n            if (tree.active == undefined) {\r\n                alert(\"Выберите вершину дерева, для которой надо добавить потомка\")\r\n                return\r\n            }\r\n            let vertexName = prompt(\"Введите имя вершины\")\r\n            let vertexArray = prompt(\"Введите множество вершин (числа через пробел\")\r\n            // проверяем введенную сроку на соответствующий формат\r\n            if (!(/^[0-9]+(\\s+[0-9]+)*$/.test(vertexArray) || /^\\s*$/.test(vertexArray))) {\r\n                alert(\"Пожалуйста, укажите множество вершин через пробел\")\r\n                return\r\n            }\r\n            tree.addLeaf(tree.active, vertexName, vertexArray.split(/\\s+/))\r\n        }\r\n\r\n        tree.removeLeaf = function (_) {\r\n            console.log(\"removeLeaf (TreeGenerate.js): удаляем вершину из дерева\")\r\n            function removeLeaf(t) {\r\n                if (t.c.some(e => e.v === _)) {\r\n                    t.c = t.c.filter(e => e.v !== _);\r\n                }\r\n                t.c.forEach(removeLeaf);\r\n            }\r\n\r\n            removeLeaf(tree.vis);\r\n            reposition(tree.vis);\r\n            tree.active = undefined;\r\n            redraw(tree.size, tree.active);\r\n        }\r\n\r\n        tree.checkVertex = function (parent, vertexName) {\r\n            console.log(\"checkVertex (TreeGenerate.js): проверка вершины\")\r\n            //проверка, есть ли введенная вершина в графе\r\n            if (tree.graph.vertices.map(e => e.name).includes(vertexName)) {\r\n                // проверка, есть ли введенная вершина в графе, соответствующем узлу-родителю\r\n                if (parent.graph.vertices.map(e => e.name).includes(vertexName)) {\r\n                    // проверка, есть ли у вершины родителя еще потомки\r\n                    if (tree.findVertice(tree.active).c.length == 0) {\r\n                        return false\r\n                    }\r\n                    else {\r\n                        // проверка, дублирует ли введенная вершина одну из вершин своего уровня\r\n                        if (!parent.c.map(e => e.l).includes(vertexName)) {\r\n                            // проверка, входит ли добавляемая вершина в окрестность первого узла потомка\r\n                            let firstChild = tree.findVertice(Math.min(...parent.c.map(e => e.v)))\r\n                            if (TaskGraph.getNeighbours(firstChild.l, parent.graph).includes(vertexName)) {\r\n                                return false\r\n                            }\r\n                            else {\r\n                                store.dispatch({\r\n                                    type: \"@@notifier/add_action\",\r\n                                    payload: {\r\n                                        fee: 5,\r\n                                        datetime: new Date(),\r\n                                        message: \"Введенная вершина не входит в окрестность первого потомка выбранной вершины\"\r\n                                    }\r\n                                })\r\n                                return true;\r\n                            }\r\n                        }\r\n                        else {\r\n                            store.dispatch({\r\n                                type: \"@@notifier/add_action\",\r\n                                payload: {\r\n                                    fee: 5,\r\n                                    datetime: new Date(),\r\n                                    message: \"У выбранной вершины уже есть потомок с этим именем\"\r\n                                }\r\n                            })\r\n                            return true;\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    store.dispatch({\r\n                        type: \"@@notifier/add_action\",\r\n                        payload: {\r\n                            fee: 5,\r\n                            datetime: new Date(),\r\n                            message: \"Вершины с данным именем нет в графе, соответствующем узлу-родителю\"\r\n                        }\r\n                    })\r\n                    return true;\r\n                }\r\n            }\r\n            else {\r\n                store.dispatch({\r\n                    type: \"@@notifier/add_action\",\r\n                    payload: {\r\n                        fee: 5,\r\n                        datetime: new Date(),\r\n                        message: \"Вершины с данным именем нет в исходом графе\"\r\n                    }\r\n                })\r\n                return true;\r\n            }\r\n        }\r\n\r\n        tree.checkWeigth = function (error, real, input) {\r\n            console.log(\"checkWeigth (TreeGenerate.js): проверка веса вершины\")\r\n            let store = require('graphlabs.core.template').store;\r\n            if (error) {\r\n                {\r\n                    store.dispatch({\r\n                        type: \"@@notifier/add_action\",\r\n                        payload: {\r\n                            fee: 0,\r\n                            datetime: new Date(),\r\n                            message: \"Так как была введена ошибочная вершина, ее вес так же считается ошибочным\"\r\n                        }\r\n                    })\r\n                    return true;\r\n                }\r\n            }\r\n            else {\r\n                // проверяем, что введенное множество вершин соответствует рассчитанной неокрестности вершины\r\n                // если несоответствие, то записываем ошибку\r\n                if (real.sort().toString() == input.sort().toString()) {\r\n                    return false\r\n                }\r\n                else {\r\n                    store.dispatch({\r\n                        type: \"@@notifier/add_action\",\r\n                        payload: {\r\n                            fee: 0,\r\n                            datetime: new Date(),\r\n                            message: \"Введеное множество вершин неверно\"\r\n                        }\r\n                    })\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n\r\n        tree.addLeaf = function (_, vertexName, vertexArray) {\r\n            console.log(\"addLeaf (TreeGenerate.js): добавляем новую вершину в дерево\")\r\n            function addLeaf(t, name) {\r\n                if (t.v == _) {\r\n                    let vError = tree.checkVertex(t, vertexName)\r\n                    t.c.push({\r\n                        v: tree.size++,\r\n                        l: vertexName,\r\n                        graph: TaskGraph.getSubgraph(vertexArray, t.graph),\r\n                        realWeight: TaskGraph.getNonNeighbours(vertexName, t.graph),\r\n                        inputWeight: vertexArray,\r\n                        vertexError: vError,\r\n                        weightError: tree.checkWeigth(vError, TaskGraph.getNonNeighbours(vertexName, t.graph), vertexArray),\r\n                        p: {},\r\n                        c: []\r\n                    });\r\n                    return;\r\n                }\r\n                t.c.forEach(e => addLeaf(e, name));\r\n            }\r\n\r\n            addLeaf(tree.vis, vertexName);\r\n            reposition(tree.vis, vertexName);\r\n            redraw(tree.size, tree.active);\r\n        }\r\n\r\n        tree.gracefulLabels = function () {\r\n            console.log(\"gracefulLabels (TreeGenerate.js)\")\r\n            tree.glabels = []\r\n            let v = tree.getVertices();\r\n            let vlbls = [], elbls = [];\r\n            let gracefulLbl = function (c) {\r\n                if (c == tree.size) {\r\n                    let lbl = {\r\n                        lbl: vlbls.map(function (_) {\r\n                            return _;\r\n                        })\r\n                    };\r\n                    relabel(lbl);\r\n                    let incMatx = tree.incMatx.map(function (_) {\r\n                        return _;\r\n                    });\r\n                    if ((tree.incMatx[0] & 2) >> 1 == 1 && tree.glabels.every(function (d) {\r\n                        return d.incMatx.toString() != incMatx.toString();\r\n                    })) {\r\n                        lbl.incMatx = incMatx;\r\n                        tree.glabels.push(lbl);\r\n                    }\r\n                    return;\r\n                }\r\n                d3.range(0, tree.size)\r\n                    .filter(function (d) {\r\n                        return (vlbls.indexOf(d) == -1) && (elbls.indexOf(Math.abs(vlbls[v[c].f.v] - d)) == -1);\r\n                    })\r\n                    .forEach(function (d) {\r\n                        vlbls[c] = d;\r\n                        elbls[c] = Math.abs(vlbls[v[c].f.v] - d);\r\n                        gracefulLbl(c + 1);\r\n                        delete vlbls[c];\r\n                        delete elbls[c];\r\n                    });\r\n            }\r\n            d3.range(0, tree.size).forEach(function (d) {\r\n                vlbls = [d];\r\n                elbls = [];\r\n                gracefulLbl(1);\r\n            });\r\n            tree.showLabel(1);\r\n            d3.select(\"#labelpos\").text(tree.currLbl + '/' + tree.glabels.length);\r\n            d3.select(\"#labelnav\").style('visibility', 'visible');\r\n        }\r\n\r\n        tree.showLabel = function (i) {\r\n            console.log(\"showLabel (TreeGenerate.js): всплывающая подсказка\")\r\n            if (i > tree.glabels.length || i < 1) {\r\n                alert('invalid label position');\r\n                return;\r\n            }\r\n\r\n            relabel(tree.glabels[i - 1]);\r\n            redraw();\r\n            tree.currLbl = i;\r\n            d3.select(\"#labelpos\").text(tree.currLbl + '/' + tree.glabels.length);\r\n        }\r\n\r\n        let relabel = function (lbl) {\r\n            console.log(\"relabel (TreeGenerate.js): перезагрузка всплывающих подсказок\")\r\n            function relbl(t) {\r\n                t.l = lbl.lbl[t.v];\r\n                t.c.forEach(relbl);\r\n            }\r\n\r\n            relbl(tree.vis);\r\n            tree.incMatx = lbl.incMatx;\r\n        }\r\n\r\n        let redraw = function (size, active) {\r\n            console.log(\"redraw (TreeGenerate.js): перерисовка дерева\")\r\n\r\n            let edges = d3.select(\"#g_lines\").selectAll('line').data(tree.getEdges());\r\n\r\n            edges.transition().duration(500)\r\n                .attr('x1', function (d) {\r\n                    return d.p1.x;\r\n                }).attr('y1', function (d) {\r\n                return d.p1.y;\r\n            })\r\n                .attr('x2', function (d) {\r\n                    return d.p2.x;\r\n                }).attr('y2', function (d) {\r\n                return d.p2.y;\r\n            })\r\n\r\n            edges.enter().append('line')\r\n                .attr('x1', function (d) {\r\n                    return d.p1.x;\r\n                }).attr('y1', function (d) {\r\n                return d.p1.y;\r\n            })\r\n                .attr('x2', function (d) {\r\n                    return d.p1.x;\r\n                }).attr('y2', function (d) {\r\n                return d.p1.y;\r\n            })\r\n                .transition().duration(500)\r\n                .attr('x2', function (d) {\r\n                    return d.p2.x;\r\n                }).attr('y2', function (d) {\r\n                return d.p2.y;\r\n            });\r\n\r\n            edges.exit().remove();\r\n\r\n            let circles = d3.select(\"#g_circles\").selectAll('circle').data(tree.getVertices());\r\n\r\n            circles.transition().duration(500).attr('cx', function (d) {\r\n                return d.p.x;\r\n            }).attr('cy', function (d) {\r\n                return d.p.y;\r\n            })\r\n                .attr('class', (d) => {\r\n                    let v = tree.findVertice(d.v);\r\n                    return v.vertexError ? (v.v == tree.active ? 'activeError' : 'error') : (v.v == tree.active ? 'active' : \"\")\r\n                });\r\n            circles.append('title').text((d) => tree.findVertice(d.v).inputWeight);\r\n\r\n            let temp = circles.enter().append('circle').attr('cx', function (d) {\r\n                return d.f.p.x;\r\n            }).attr('cy', function (d) {\r\n                return d.f.p.y;\r\n            }).attr('r', vRad)\r\n                .on('click', function (d) {\r\n                    return tree.changeActive(d.v);\r\n                })\r\n            temp.append('title').text((d) => tree.findVertice(d.v).inputWeight);\r\n            temp.transition().duration(500).attr('cx', function (d) {\r\n                return d.p.x;\r\n            }).attr('cy', function (d) {\r\n                return d.p.y;\r\n            })\r\n                .attr('class', (d) => {\r\n                    let v = tree.findVertice(d.v);\r\n                    return v.vertexError ? (v.v == tree.active ? 'activeError' : 'error') : (v.v == tree.active ? 'active' : \"\")\r\n                })\r\n\r\n            circles.exit().remove();\r\n\r\n            let labels = d3.select(\"#g_labels\").selectAll('text').data(tree.getVertices());\r\n\r\n            labels.text(function (d) {\r\n                return d.l;\r\n            }).transition().duration(500)\r\n                .attr('x', function (d) {\r\n                    return d.p.x;\r\n                }).attr('y', function (d) {\r\n                return d.p.y + 5;\r\n            });\r\n            labels.append('title').text((d) => tree.findVertice(d.v).inputWeight);\r\n\r\n            temp = labels.enter().append('text').attr('x', function (d) {\r\n                return d.f.p.x;\r\n            }).attr('y', function (d) {\r\n                return d.f.p.y + 5;\r\n            })\r\n                .text(function (d) {\r\n                    return d.l;\r\n                }).on('click', function (d) {\r\n                    return tree.changeActive(d.v);\r\n                })\r\n            temp.transition().duration(500)\r\n                .attr('x', function (d) {\r\n                    return d.p.x;\r\n                }).attr('y', function (d) {\r\n                return d.p.y + 5;\r\n            })\r\n            temp.append('title').text((d) => tree.findVertice(d.v).inputWeight);\r\n\r\n            labels.exit().remove();\r\n        }\r\n\r\n        let getLeafCount = function (_) {\r\n            console.log(\"getLeafCount (TreeGenerate.js): получаем порядок вершины\")\r\n\r\n            if (_.c.length == 0) return 1;\r\n            else return _.c.map(getLeafCount).reduce(function (a, b) {\r\n                return a + b;\r\n            });\r\n        }\r\n\r\n        let reposition = function (v) {\r\n            console.log(\"reposition (TreeGenerate.js): перезаписываем позиции вершин\")\r\n            let lC = getLeafCount(v), left = v.p.x - tree.w * (lC - 1) / 2;\r\n            v.c.forEach(function (d) {\r\n                let w = tree.w * getLeafCount(d);\r\n                left += w;\r\n                d.p = {x: left - (w + tree.w) / 2, y: v.p.y + tree.h};\r\n                reposition(d);\r\n            });\r\n        }\r\n\r\n        let initialize = function () {\r\n            console.log(\"initialize (TreeGenerate.js): инициализация дерева\")\r\n\r\n            d3.select(\"#my-canvas\").append(\"div\").attr('id', 'navdiv');\r\n\r\n            d3.select(\"#navdiv\").append(\"button\").attr('type', 'button').text('+')\r\n                .on('click', function () {\r\n                    return tree.inputAndCheck();\r\n                });\r\n\r\n            d3.select(\"#navdiv\").append(\"button\").attr('type', 'button').text('-')\r\n                .on('click', function () {\r\n                    return tree.removeLeaf(tree.active);\r\n                });\r\n\r\n            d3.select(\"#my-canvas\").append(\"svg\").attr(\"width\", svgW + \"%\").attr(\"height\", svgH + \"%\").attr('id', 'treesvg').attr('viewBox', \"0 0 600 600\");\r\n\r\n            d3.select(\"#treesvg\").append('g').attr('id', 'g_lines').selectAll('line').data(tree.getEdges()).enter().append('line')\r\n                .attr('x1', function (d) {\r\n                    return d.p1.x;\r\n                }).attr('y1', function (d) {\r\n                return d.p1.y;\r\n            })\r\n                .attr('x2', function (d) {\r\n                    return d.p2.x;\r\n                }).attr('y2', function (d) {\r\n                return d.p2.y;\r\n            });\r\n\r\n            d3.select(\"#treesvg\").append('g').attr('id', 'g_circles').selectAll('circle').data(tree.getVertices()).enter()\r\n                .append('circle').attr('cx', function (d) {\r\n                return d.p.x;\r\n            }).attr('cy', function (d) {\r\n                return d.p.y;\r\n            }).attr('r', vRad)\r\n                .on('click', function (d) {\r\n                    return tree.changeActive(d.v);\r\n                })\r\n                .append('title').text((d) => tree.findVertice(d.v).inputWeight);\r\n\r\n            d3.select(\"#treesvg\").append('g').attr('id', 'g_labels').selectAll('text').data(tree.getVertices()).enter().append('text')\r\n                .attr('x', function (d) {\r\n                    return d.p.x;\r\n                }).attr('y', function (d) {\r\n                return d.p.y + 5;\r\n            }).text(function (d) {\r\n                return d.l;\r\n            })\r\n                .on('click', function (d) {\r\n                    return tree.changeActive(d.v);\r\n                })\r\n                .append('title').text((d) => tree.findVertice(d.v).inputWeight);\r\n        }\r\n        initialize();\r\n        this.tree = tree;\r\n    }\r\n\r\n}\r\n","import React, { Component } from 'react';\nimport {default as styled, StyledFunction } from 'styled-components';\nimport {TaskTemplate, TaskToolbar, ToolButtonList} from 'graphlabs.core.template';\n\nimport './App.css';\nimport {Tree as _Tree} from \"./TreeGenerate\";\n\nconst BorderedDiv = styled.div`\n  {\n    box-shadow:2px 2px 11px rgba(0, 0, 0, 0.5);\n    -webkit-box-shadow:2px 2px 11px rgba(0, 0, 0, 0.5);\n    border-radius: 10px;\n    background: #fffaf0;\n  }\n`;\n\nconst GraphCell = BorderedDiv.extend`\n  {\n    position: fixed;\n    left: 15%;\n    top: 1%;\n    width: 62%;\n    height: 78%;\n  }\n`;\n\nconst ToolCell = BorderedDiv.extend`\n  {\n     position: fixed;\n    left: 1%;\n    top: 1%;\n    width: 12%;\n    height: 78%;\n  }\n`;\n\nconst TaskCell = BorderedDiv.extend`\n  {\n    position: fixed;\n    left: 79%;\n    top: 1%;\n    width: 20%;\n    height: 15%;\n  }\n`;\n\nconst TaskCell2 = BorderedDiv.extend`\n  {\n    position: fixed;\n    left: 79%;\n    top: 17%;\n    width: 20%;\n    height: 62%;\n  }\n`;\n\nconst LeftBottom = BorderedDiv.extend`\n  {\n    position: fixed;\n    left: 1%;\n    top: 80%;\n    width: 12%;\n    height: 19%;\n  }\n`;\n\nconst LowRow =  BorderedDiv.extend`\n  {\n    position: fixed;\n    left: 15%;\n    top: 80%;\n    width: 84%;\n    height: 19%;\n  }\n`;\n\nconst App2 = styled.div`\n  {\n    position: fixed;\n    left: 0;\n    top: 0;\n    width: 100%;\n    height: 100%;\n  }\n`;\n\nconst MainRow = styled.div`\n  {\n    position: fixed;\n    left: 0;\n    top: 0;\n    width: 100%;\n    height: 80%;\n  }\n`;\n\n// noinspection JSAnnotator\nclass App extends TaskTemplate {\n\n    tree;\n\n    calculate() {\n        console.log(\"calculate (App.js)\")\n        let res = 10;\n        return { success: res === 0, fee: res };\n    }\n\n    componentDidMount() {\n        console.log(\"componentDidMount (App.js): создаем новое дерево\")\n        this.tree = new _Tree();\n    }\n\n    task() {\n        console.log(\"task (App.js)\")\n        return (\n            () => <div id={'my-canvas'}></div>\n        )\n    }\n\n    getTaskToolbar() {\n        console.log(\"getTaskToolbar (App.js): возвращаем панель инструментов, начало\")\n        TaskToolbar.prototype.getButtonList = () => {\n            ToolButtonList.prototype.help = () => `В данном задании вы должны построить дерево, посадить сына и срубить дом`;\n            ToolButtonList.prototype.toolButtons = {\n                '+': () => {\n                    if (this.tree) this.tree.addLeaf()\n                },\n                '-': () => {\n                    if (this.tree) this.tree.removeLeaf()\n                }\n            }\n            console.log(\"getTaskToolbar (App.js): возвращаем список кнопок на пенли инструментов\")\n            return ToolButtonList;\n        };\n        console.log(\"getTaskToolbar (App.js): возвращаем панель инструментов со всеми кнопками\")\n        return TaskToolbar;\n    }\n}\n\nexport default App;\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  console.log(\"register (serviceWorker.js\")\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  console.log(\"registerValidSW (serviceWorker.js)\")\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  console.log(\"checkValidServiceWorker (serviceWorker.js)\")\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  console.log(\"unregister (serviceWorker.js)\")\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}